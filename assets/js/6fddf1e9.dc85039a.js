"use strict";(self.webpackChunksanchonet=self.webpackChunksanchonet||[]).push([[589],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),k=a,y=d["".concat(s,".").concat(k)]||d[k]||u[k]||r;return n?o.createElement(y,i(i({ref:t},p),{},{components:n})):o.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"Register a stake pool",title:"Register a stake pool in SanchoNet",sidebar_position:4,slug:"/tutorials/stake-pool-registration"},i=void 0,l={unversionedId:"tutorials/register-spo",id:"tutorials/register-spo",title:"Register a stake pool in SanchoNet",description:"WARNING: This tutorial is simplified and deliberately excludes secure key handling which is essential for other testnets",source:"@site/docs/tutorials/register-spo.mdx",sourceDirName:"tutorials",slug:"/tutorials/stake-pool-registration",permalink:"/tutorials/stake-pool-registration",draft:!1,editUrl:"https://github.com/input-output-hk/sanchonet/tree/master/docs/tutorials/register-spo.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Register a stake pool",title:"Register a stake pool in SanchoNet",sidebar_position:4,slug:"/tutorials/stake-pool-registration"},sidebar:"docsSidebar",previous:{title:"Create keys and the address",permalink:"/tutorials/address"},next:{title:"Create actions",permalink:"/tutorials/create-action"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Set up a relay node",id:"set-up-a-relay-node",level:3},{value:"Set up a block producer",id:"set-up-a-block-producer",level:3},{value:"Register your stake pool",id:"register-your-stake-pool",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING"),": This tutorial is simplified and deliberately excludes secure key handling which is essential for other testnets\nand mainnet. For a comprehensive tutorial, see the ",(0,a.kt)("a",{parentName:"p",href:"https://cardano-course.gitbook.io/cardano-course/"},"Cardano course")," where you can access video lessons and a more detailed instruction handbook."),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Before you start, ensure that you are familiar with:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Running a node: ",(0,a.kt)("a",{parentName:"li",href:"/tutorials/start-node"},"see the tutorial")),(0,a.kt)("li",{parentName:"ol"},"Created keys and addresses: ",(0,a.kt)("a",{parentName:"li",href:"/tutorials/address"},"see the tutorial")),(0,a.kt)("li",{parentName:"ol"},"Requested funds from the faucet: ",(0,a.kt)("a",{parentName:"li",href:"/faucet"},"see the tutorial"))),(0,a.kt)("h3",{id:"set-up-a-relay-node"},"Set up a relay node"),(0,a.kt)("p",null,"Setting up a stake pool on SanchoNet involves configuring a block producer node and at least one relay node. The relay node plays a crucial\nrole in propagating the blocks forged by your block-producing node, as well as fetching blocks from other stake pools and serving them to your block producer. In this structure,\nthe block producer communicates solely with your relay node, which in turn interfaces with the rest of the network. This ensures a streamlined communication process and helps to secure your block producer. "),(0,a.kt)("p",null,"The typical configuration of the stake pool should resemble the following:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"diagram",src:n(5043).Z,width:"750",height:"366"})),(0,a.kt)("p",null,"To set up your relay node, carry out the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Install the Cardano node and the Cardano CLI")," on your relay node. ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Configure the firewall for incoming connections"),": set up the firewall to accept incoming connections on the\nspecific port that you'll be using for the Cardano node. This allows other nodes, including your block producer, to communicate with your relay.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Configure the firewall for outgoing connections"),": enable the firewall to allow outgoing connections. This configuration ensures\nthat your relay node can contact other relay nodes in the network as well as your block producer node. ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Run the node with P2P topology"),": start your node using the P2P topology setting. Replace ",(0,a.kt)("strong",{parentName:"p"},'"address":"z.z.z.z"')," and ",(0,a.kt)("strong",{parentName:"p"},'"port":3000')," with the actual IP address\nand the port of your block producer node. This step ensures that your relay node will always maintain a connection with your block producer node."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n   "localRoots":[\n      {\n         "accessPoints":[],\n         "advertise":false,\n         "valency":2\n      }\n   ],\n   "publicRoots":[\n      {\n         "accessPoints":[\n            {\n               "address":"sanchonet-node.world.dev.cardano.org",\n               "port":30004\n            }\n         ],\n         "advertise":false\n      }\n   ],\n   "useLedgerAfterSlot":1000000\n}\n')),(0,a.kt)("h3",{id:"set-up-a-block-producer"},"Set up a block producer"),(0,a.kt)("p",null,"Setting up your block producer involves similar steps, but there are a few differences in the configuration: "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Install the Cardano node and the Cardano CLI")," on your block producer node. ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Configure the firewall for incoming connections"),": set up the firewall to accept incoming connections ",(0,a.kt)("strong",{parentName:"p"},"only from your relay node")," on the\nspecific port that you'll be using for the Cardano node. This ensures that only your relay node can communicate with your block producer.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Configure the firewall for outgoing connections"),": enable the firewall to allow outgoing connections, preferably, ",(0,a.kt)("strong",{parentName:"p"},"only to your own relay's IP and port"),". ")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Run the node with P2P topology"),": start your node using the P2P topology configuration. This time, replace ",(0,a.kt)("strong",{parentName:"p"},'"address":"x.x.x.x"')," and ",(0,a.kt)("strong",{parentName:"p"},'"port":3000')," with the actual IP address\nand the port of your ",(0,a.kt)("strong",{parentName:"p"},"own relay node"),". Note that the block producer does not connect to ",(0,a.kt)("inlineCode",{parentName:"p"},"sanchonet-node.world.dev.cardano.org")," and we avoid using ledger peers by setting ",(0,a.kt)("inlineCode",{parentName:"p"},'"useLedgerAfterSlot\xa8'),"to ",(0,a.kt)("inlineCode",{parentName:"p"},"-1")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n   "localRoots":[\n      {\n         "accessPoints":[\n            {\n               "address":"x.x.x.x",\n               "port":3000\n            }\n         ],\n         "advertise":false,\n         "valency":2\n      }\n   ],\n   "publicRoots":[\n      {\n         "accessPoints":[\n         ],\n         "advertise":false\n      }\n   ],\n   "useLedgerAfterSlot":-1\n}\n')),(0,a.kt)("h3",{id:"register-your-stake-pool"},"Register your stake pool"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://jqlang.github.io/jq"},"jq"),", a tool that will assist in parsing the UTXOs for transactions:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo apt-get install jq -y\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"CARDANO_NODE_SOCKET_PATH")," variable to the path of ",(0,a.kt)("inlineCode",{parentName:"li"},"node.socket")," that you identified when starting the node:  ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"export CARDANO_NODE_SOCKET_PATH=~/node.socket\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Register the stake address you previously created by generating a registration certificate:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli stake-address registration-certificate \\\n--stake-verification-key-file stake.vkey \\\n--key-reg-deposit-amt 2000000 \\\n--out-file registration.cert\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Create a transaction to submit the stake key registration certificate to the chain. Creating a transaction using the CLI always involves a three-step process: BUILDING, SIGNING, AND SUBMITTING the transaction.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Build")," the transaction:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction build \\\n--conway-era \\\n--testnet-magic 4 \\\n--witness-override 2 \\\n--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 4 --out-file  /dev/stdout | jq -r 'keys[0]') \\\n--change-address $(cat payment.addr) \\\n--certificate-file registration.cert \\\n--out-file tx.raw\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Sign")," the transaction:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction sign \\\n--tx-body-file tx.raw \\\n--signing-key-file payment.skey \\\n--signing-key-file stake.skey \\\n--testnet-magic 4 \\\n--out-file tx.signed\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Submit")," the transaction:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction submit \\\n--testnet-magic 4 \\\n--tx-file tx.signed \n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Generate cold keys and the operational certificate for your pool:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli node key-gen \\\n--cold-verification-key-file cold.vkey \\\n--cold-signing-key-file cold.skey \\\n--operational-certificate-issue-counter-file opcert.counter\n")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Generate the key-evolving-signature (KES) keys:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli node key-gen-KES \\\n--verification-key-file kes.vkey \\\n--signing-key-file kes.skey\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Generate VRF keys:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli node key-gen-VRF \\\n--verification-key-file vrf.vkey \\\n--signing-key-file vrf.skey\n")),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"Create your stake pool registration certificate:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli stake-pool registration-certificate \\\n--conway-era \\\n--cold-verification-key-file cold.vkey \\\n--vrf-verification-key-file vrf.vkey \\\n--pool-pledge 9000000000 \\\n--pool-cost 340000000 \\\n--pool-margin 0.05 \\\n--pool-reward-account-verification-key-file stake.vkey \\\n--pool-owner-stake-verification-key-file stake.vkey \\\n--testnet-magic 4 \\\n--pool-relay-ipv4 <RELAY NODE PUBLIC IP> \\\n--pool-relay-port <RELAY NODE PORT> \\\n--out-file pool-registration.cert\n")),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"Create a stake delegation certificate:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli stake-address delegation-certificate \\\n--conway-era \\\n--stake-verification-key-file stake.vkey \\\n--cold-verification-key-file cold.vkey \\\n--out-file delegation.cert\n")),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},"Submit pool registration and stake delegation certificates:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Build:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction build \\\n--conway-era \\\n--testnet-magic 4 \\\n--witness-override 3 \\\n--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 4 --out-file  /dev/stdout | jq -r 'keys[0]') \\\n--change-address $(cat payment.addr) \\\n--certificate-file pool-registration.cert \\\n--certificate-file delegation.cert \\\n--out-file tx.raw\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sign:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction sign \\\n--tx-body-file tx.raw \\\n--signing-key-file payment.skey \\\n--signing-key-file cold.skey \\\n--signing-key-file stake.skey \\\n--testnet-magic 4 \\\n--out-file tx.signed\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Submit:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli transaction submit \\\n--testnet-magic 4 \\\n--tx-file tx.signed \n")),(0,a.kt)("ol",{start:11},(0,a.kt)("li",{parentName:"ol"},"Get your pool ID, you will need to get a delegation from the faucet:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli stake-pool id \\\n--cold-verification-key-file cold.vkey \\\n--output-format bech32 \\\n--out-file pool.id\n")),(0,a.kt)("ol",{start:12},(0,a.kt)("li",{parentName:"ol"},"Generate you operation certificate:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"slotsPerKESPeriod=$(cat shelley-genesis.json | jq -r '.slotsPerKESPeriod')\nslotNo=$(cardano-cli query tip --testnet-magic 4 | jq -r '.slot')\nkesPeriod=$((${slotNo} / ${slotsPerKESPeriod}))\ncardano-cli node issue-op-cert --kes-verification-key-file kes.vkey --cold-signing-key-file cold.skey --operational-certificate-issue-counter-file opcert.counter --kes-period ${kesPeriod} --out-file opcert.cert\n")),(0,a.kt)("ol",{start:13},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Request a stake delegation from the ",(0,a.kt)("a",{parentName:"p",href:"/faucet"},"faucet"),". Note that although the delegation will ocurr immediately, you will need two more epochs\nfor your Block producer to start creating blocks. This due to the stake snashopt mechanism.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Restart your node using your pool credentials:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-node run --topology topology.json \\\n--database-path db \\\n--socket-path node.socket \\\n--shelley-kes-key kes.skey \\\n--shelley-vrf-key vrf.skey \\\n--shelley-operational-certificate opcert.cert \\\n--port 3001 \\\n--config config.json\n")),(0,a.kt)("ol",{start:15},(0,a.kt)("li",{parentName:"ol"},"Your stake pool will take part of the stake snapshot on the next epoch boundary. After that, you will be able to query the stake delegated to your pool:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-cli query stake-snapshot \\\n--testnet-magic 4 \\\n--stake-pool-id <pool_id>\n")),(0,a.kt)("ol",{start:16},(0,a.kt)("li",{parentName:"ol"},"After two epochs (2 days in SanchoNet) your stake pool should start producing blocks, the easiest way to verify it is to ",(0,a.kt)("inlineCode",{parentName:"li"},"grep")," your node logs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"grep -e TraceForgedBlock\n")))}u.isMDXComponent=!0},5043:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/bpandrelay-3ee2a947193e9d780be6e81d068c14b7.png"}}]);